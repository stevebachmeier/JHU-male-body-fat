library(caret)
detectCores()
library(parallel)
detectCores()
load("C:/Users/steve/Desktop/Data Science Specialization - JHU/08 Practical Machine Learning/BicepCurlAnalysis/.RData")
accDF
# 1 trees
number <- 1
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
set.seed(101)
fitRf1 <- train(classe ~ ., data=training, method="rf",
trControl=trainControl(method="cv", number=number, allowParallel=T))
stopCluster(cluster)
registerDoSEQ()
predRf1 <- predict(fitRf1, newdata=testing)
library(caret)
library(parallel)
library(doParallel)
library(dplyr)
# 1 trees
number <- 1
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
set.seed(101)
fitRf1 <- train(classe ~ ., data=training, method="rf",
trControl=trainControl(method="cv", number=number, allowParallel=T))
stopCluster(cluster)
registerDoSEQ()
predRf1 <- predict(fitRf1, newdata=testing)
training
dim(training)
number <- 1
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
set.seed(101)
fitRf1 <- train(classe ~ ., data=training, method="rf",
trControl=trainControl(method="cv", number=number, allowParallel=T))
# 1 trees
number <- 2
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
set.seed(101)
fitRf1 <- train(classe ~ ., data=training, method="rf",
trControl=trainControl(method="cv", number=number, allowParallel=T))
stopCluster(cluster)
registerDoSEQ()
predRf1 <- predict(fitRf1, newdata=testing)
remove(fitRf1, predRf1)
accDF
confusionMatrix(predRf2, testing)
confusionMatrix(predRf2, testing$classe)
dim(training)
fitRf2
fitRf2$finalModel
1-.9814
confusionMatrix(predRf2, testing$classe)
confusionMatrix(predRf2, testing$classe)$Accuracy
confusionMatrix(predRf2, testing$classe)$Overall
confusionMatrix(predRf2, testing$classe)$overall
confusionMatrix(predRf2, testing$classe)$overall["Accuracy"]
# ---- Update accuracy table ----
accDF$stackRf2Gbm2 <- confusionMatrix(predRf2Gbm2V, validation$classe)$overall["Accuracy"]
accDF
fitRpart
fitRpart$finalModel
confusionMatrix(predRpart, validation$classe)$overall["Accuracy"]
confusionMatrix(predRpart, testing$classe)$overall["Accuracy"]
fitRpart
fitRpart$finalModel
fitRpart
fitRpart[1]
fitRpart[2]
fitRpart[3]
fitRpart[4]
fitRpart$results
confusionMatrix(predRpart, testing$classe)$overall["Accuracy"]
fitRpart$results["Accuracy"]
fitRf2
fitRf2$finalModel
100-1.6
fitRpart$results["Accuracy"]
confusionMatrix(predRpart, testing$classe)
confusionMatrix(predRpart, testing$classe)$reference
confusionMatrix(predRpart, testing$classe)[1]
confusionMatrix(predRpart, testing$classe)[2]
confusionMatrix(predRpart, testing$classe)$table
confusionMatrix(predRpart, testing$classe)$table[1]
diag(confusionMatrix(predRpart, testing$classe)$table)
sum(diag(confusionMatrix(predRpart, testing$classe)$table))
sum(confusionMatrix(predRpart, testing$classe)$table)
2298/4904
confusionMatrix(predRpart, testing$classe)
fitRpart
sample.int(3)
sample.int(10)
sample.int(1)
sample.int(1)
sample.int(1)
sample.int(n=3, 1)
sample.int(n=3, 1)
sample.int(n=3, 1)
sample.int(n=3, 1)
sample.int(n=3, 1)
sample.int(n=3, 1)
sample.int(n=3, 1)
sample.int(n=3, 1)
sample.int(n=3, 1)
sample.int(n=3, 1)
1=straight outta...
2 = ozark
3 = hand on cock
sample.int(n=3, 1)
?trainControl
?train
?train
?trainControl
fitRpart
fitRpart$finalModel
confusionMatrix(predRf2, testing$classe)
library(caret)
confusionMatrix(predRf2, testing$classe)
confusionMatrix(predRf2, testing$classe)$overall
confusionMatrix(predRf2, testing$classe)$matrix
confusionMatrix(predRf2, testing$classe)1
confusionMatrix(predRf2, testing$classe)[1]
confusionMatrix(predRf2, testing$classe)[2]
confusionMatrix(predRf2, testing$classe)$table
diag(confusionMatrix(predRf2, testing$classe)$table)
sum(diag(confusionMatrix(predRf2, testing$classe)$table))
sum(diag(confusionMatrix(predRf2, testing$classe)$table))
sum(diag(confusionMatrix(predRf2, testing$classe)$table)) / sum((confusionMatrix(predRf2, testing$classe)$table))
confusionMatrix(predRf2, testing$classe)$overall
printcp(fitRpart)
library(rpart)
printcp(fitRpart)
confusionMatrix(predRf2, testing$classe)$overall["Accuracy"]
fitRf2
fitRf5
fitRf2$finalModel
print(fitRf2$finalModel)
fitRf2$finalModel[1]
fitRf2$finalModel[2]
fitRf2$finalModel[3]
head(fitRf2$finalModel[3])
head(fitRf2$finalModel[4])
head(fitRf2$finalModel[5])
fitRf2$finalModel[5]
fitRf2$finalModel[6]
fitRf2$finalModel[7]
fitRf2$finalModel[8]
fitRf2$finalModel[9]
fitRf2$finalModel[10]
fitRf2$finalModel[11]
fitRf2$finalModel[12]
fitRf2$finalModel[13]
fitRf2$finalModel[14]
fitRf2$finalModel[15]
fitRf2$finalModel[16]
fitRf2$finalModel[17]
fitRf2$finalModel[18]
fitRf2$finalModel[19]
fitRf2$finalModel[20]
fitRf2$finalModel[21]
fitRf2$finalModel[22]
fitRf2$finalModel[23]
fitRf2$finalModel[24]
fitRf2$finalModel[25]
fitRf2$finalModel["confusion"]
diag(fitRf2$finalModel["confusion"])
fitRf2$finalModel["confusion"][,1:5]
fitRf2$finalModel["confusion"]
fitRf2$finalModel["confusion"][1]
fitRf2$finalModel["confusion"][2]
fitRf2$finalModel["confusion"][1:2,]
class(fitRf2$finalModel["confusion"])
fitRf2$finalModel[["confusion"]]
fitRf2$finalModel[["confusion"]][1:2,]
fitRf2$finalModel[["confusion"]][,1:5]
sum(diag(fitRf2$finalModel[["confusion"]][,1:5]))
sum(diag(fitRf2$finalModel[["confusion"]][,1:5])) / sum(fitRf2$finalModel[["confusion"]][,1:5])
sum(diag(fitRf3$finalModel[["confusion"]][,1:5])) / sum(fitRf3$finalModel[["confusion"]][,1:5])
sum(diag(fitRf5$finalModel[["confusion"]][,1:5])) / sum(fitRf5$finalModel[["confusion"]][,1:5])
accDF
round(accDF, 3)
round(accDF, 3)*100
(rbind(round(accDF, 2), "OOS Error"=round(sapply(accDF, function(x) {1-x}), 3))) * 100
getwd()
shiny::runApp('Development/Data Science/Data Science Specialization - JHU/09 Developing Data Products/examplesShiny/appPlotRandomNumbers')
runApp('Development/Data Science/Data Science Specialization - JHU/09 Developing Data Products/examplesShiny/appHorsepowerPredictor')
setwd("~/Development/Data Science/Data Science Specialization - JHU/09 Developing Data Products/Project/maleBodyFatShinyApp")
getwd()
library(shiny)
runApp("maleBodyFatShinyApp")
dir()
getwd()
runApp("app")
getwd()
dir()
runApp("maleBodyFatApp/")
library(shiny)
runGitHub("maleBodyFatApp", "stevebachmeier")
runGitHub("maleBodyFatShinyApp", "stevebachmeier")
